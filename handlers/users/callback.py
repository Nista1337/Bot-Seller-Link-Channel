from aiogram import types, F
from loader import router
from aiogram.fsm.context import FSMContext
from utils.misc.pyaaio import Aaio
from utils.db_api.db_file import DataBase
import data.config as config
import time
import keyboards.inline.keyboard as kb
from datetime import datetime, timedelta
from aiogram import Bot

@router.callback_query(F.data == ('cancel'))
async def cancel_handler(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!", reply_markup=kb.get_keyboard())

@router.callback_query(F.data == ('back'))
async def cancel_handler(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.get_keyboard())


@router.callback_query(F.data == ('buy_access'))
async def buy_access_handler(call: types.CallbackQuery, state: FSMContext, db: DataBase, aaio: Aaio):
    status = await db.get_status(call.from_user.id)


    if status:
        await call.answer('–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É ‚ù§Ô∏è‚Äçüî•', show_alert=True)
        return
    await call.message.delete()
    bill_id = f'{int(time.time())}_{call.from_user.id}'
    pay_url = aaio.build_form_url(amount=config.price_access, desc=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ {call.from_user.id}', order_id=bill_id)

    await call.message.answer(f"""
üí≥ –ú–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: Aaio
üí∏ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <code>{config.price_access}</code> rub
üÜî ID –ø–ª–∞—Ç–µ–∂–∞: <code>{bill_id}</code>""", reply_markup=kb.keyboard_payment(url=pay_url))
    

@router.callback_query(F.data == ('check_pay'))
async def check_pay_handler(call: types.CallbackQuery, state: FSMContext, db: DataBase, aaio: Aaio, bot: Bot):


    bill_id = (call.message.text).split('\n')[-1].split(' ')[-1]
    status_payment = await aaio.get_order(payment_id=bill_id)
    status_ = status_payment.get('status') == 'success'
    if status_:
        await call.message.delete()
        expire_date = datetime.now() + timedelta(days=1)
        link = await bot.create_chat_invite_link(chat_id=config.channel_id, expire_date=expire_date.timestamp(), member_limit=1)        
        await call.message.answer(f"<b>‚úÖ –ü–ª–∞—Ç—ë–∂ –Ω–∞–π–¥–µ–Ω, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\nüîó –í–∞—à–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {link.invite_link}\n‚ùóÔ∏è –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –±—ã—Å—Ç—Ä–µ–µ! –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 1 –¥–Ω</b>")
        await db.set_status(call.from_user.id)
        for i in config.ADMINS:
            try:
                await bot.send_message(i, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{call.from_user.username} ({call.from_user.id}) –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –≤ –∫–∞–Ω–∞–ª")
            except:
                pass
    else:
        await call.answer("‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")



@router.callback_query(F.data == ('information'))
async def information_handler(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer(config.information, reply_markup=kb.back_keyboard())
